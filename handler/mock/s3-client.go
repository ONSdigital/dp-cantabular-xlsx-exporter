// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-cantabular-xlsx-exporter/handler"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

// Ensure, that S3UploaderMock does implement handler.S3Uploader.
// If this is not the case, regenerate this file with moq.
var _ handler.S3Uploader = &S3UploaderMock{}

// S3UploaderMock is a mock implementation of handler.S3Uploader.
//
// 	func TestSomethingThatUsesS3Uploader(t *testing.T) {
//
// 		// make and configure a mocked handler.S3Uploader
// 		mockedS3Uploader := &S3UploaderMock{
// 			BucketNameFunc: func() string {
// 				panic("mock out the BucketName method")
// 			},
// 			HeadFunc: func(key string) (*s3.HeadObjectOutput, error) {
// 				panic("mock out the Head method")
// 			},
// 			UploadWithContextFunc: func(ctx context.Context, input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 				panic("mock out the UploadWithContext method")
// 			},
// 			UploadWithPSKAndContextFunc: func(ctx context.Context, input *s3manager.UploadInput, psk []byte, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 				panic("mock out the UploadWithPSKAndContext method")
// 			},
// 		}
//
// 		// use mockedS3Uploader in code that requires handler.S3Uploader
// 		// and then make assertions.
//
// 	}
type S3UploaderMock struct {
	// BucketNameFunc mocks the BucketName method.
	BucketNameFunc func() string

	// HeadFunc mocks the Head method.
	HeadFunc func(key string) (*s3.HeadObjectOutput, error)

	// UploadWithContextFunc mocks the UploadWithContext method.
	UploadWithContextFunc func(ctx context.Context, input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// UploadWithPSKAndContextFunc mocks the UploadWithPSKAndContext method.
	UploadWithPSKAndContextFunc func(ctx context.Context, input *s3manager.UploadInput, psk []byte, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// BucketName holds details about calls to the BucketName method.
		BucketName []struct {
		}
		// Head holds details about calls to the Head method.
		Head []struct {
			// Key is the key argument value.
			Key string
		}
		// UploadWithContext holds details about calls to the UploadWithContext method.
		UploadWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Options is the options argument value.
			Options []func(*s3manager.Uploader)
		}
		// UploadWithPSKAndContext holds details about calls to the UploadWithPSKAndContext method.
		UploadWithPSKAndContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Psk is the psk argument value.
			Psk []byte
			// Options is the options argument value.
			Options []func(*s3manager.Uploader)
		}
	}
	lockBucketName              sync.RWMutex
	lockHead                    sync.RWMutex
	lockUploadWithContext       sync.RWMutex
	lockUploadWithPSKAndContext sync.RWMutex
}

// BucketName calls BucketNameFunc.
func (mock *S3UploaderMock) BucketName() string {
	if mock.BucketNameFunc == nil {
		panic("S3UploaderMock.BucketNameFunc: method is nil but S3Uploader.BucketName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBucketName.Lock()
	mock.calls.BucketName = append(mock.calls.BucketName, callInfo)
	mock.lockBucketName.Unlock()
	return mock.BucketNameFunc()
}

// BucketNameCalls gets all the calls that were made to BucketName.
// Check the length with:
//     len(mockedS3Uploader.BucketNameCalls())
func (mock *S3UploaderMock) BucketNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBucketName.RLock()
	calls = mock.calls.BucketName
	mock.lockBucketName.RUnlock()
	return calls
}

// Head calls HeadFunc.
func (mock *S3UploaderMock) Head(key string) (*s3.HeadObjectOutput, error) {
	if mock.HeadFunc == nil {
		panic("S3UploaderMock.HeadFunc: method is nil but S3Uploader.Head was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockHead.Lock()
	mock.calls.Head = append(mock.calls.Head, callInfo)
	mock.lockHead.Unlock()
	return mock.HeadFunc(key)
}

// HeadCalls gets all the calls that were made to Head.
// Check the length with:
//     len(mockedS3Uploader.HeadCalls())
func (mock *S3UploaderMock) HeadCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockHead.RLock()
	calls = mock.calls.Head
	mock.lockHead.RUnlock()
	return calls
}

// UploadWithContext calls UploadWithContextFunc.
func (mock *S3UploaderMock) UploadWithContext(ctx context.Context, input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadWithContextFunc == nil {
		panic("S3UploaderMock.UploadWithContextFunc: method is nil but S3Uploader.UploadWithContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Options []func(*s3manager.Uploader)
	}{
		Ctx:     ctx,
		Input:   input,
		Options: options,
	}
	mock.lockUploadWithContext.Lock()
	mock.calls.UploadWithContext = append(mock.calls.UploadWithContext, callInfo)
	mock.lockUploadWithContext.Unlock()
	return mock.UploadWithContextFunc(ctx, input, options...)
}

// UploadWithContextCalls gets all the calls that were made to UploadWithContext.
// Check the length with:
//     len(mockedS3Uploader.UploadWithContextCalls())
func (mock *S3UploaderMock) UploadWithContextCalls() []struct {
	Ctx     context.Context
	Input   *s3manager.UploadInput
	Options []func(*s3manager.Uploader)
} {
	var calls []struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Options []func(*s3manager.Uploader)
	}
	mock.lockUploadWithContext.RLock()
	calls = mock.calls.UploadWithContext
	mock.lockUploadWithContext.RUnlock()
	return calls
}

// UploadWithPSKAndContext calls UploadWithPSKAndContextFunc.
func (mock *S3UploaderMock) UploadWithPSKAndContext(ctx context.Context, input *s3manager.UploadInput, psk []byte, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadWithPSKAndContextFunc == nil {
		panic("S3UploaderMock.UploadWithPSKAndContextFunc: method is nil but S3Uploader.UploadWithPSKAndContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Psk     []byte
		Options []func(*s3manager.Uploader)
	}{
		Ctx:     ctx,
		Input:   input,
		Psk:     psk,
		Options: options,
	}
	mock.lockUploadWithPSKAndContext.Lock()
	mock.calls.UploadWithPSKAndContext = append(mock.calls.UploadWithPSKAndContext, callInfo)
	mock.lockUploadWithPSKAndContext.Unlock()
	return mock.UploadWithPSKAndContextFunc(ctx, input, psk, options...)
}

// UploadWithPSKAndContextCalls gets all the calls that were made to UploadWithPSKAndContext.
// Check the length with:
//     len(mockedS3Uploader.UploadWithPSKAndContextCalls())
func (mock *S3UploaderMock) UploadWithPSKAndContextCalls() []struct {
	Ctx     context.Context
	Input   *s3manager.UploadInput
	Psk     []byte
	Options []func(*s3manager.Uploader)
} {
	var calls []struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Psk     []byte
		Options []func(*s3manager.Uploader)
	}
	mock.lockUploadWithPSKAndContext.RLock()
	calls = mock.calls.UploadWithPSKAndContext
	mock.lockUploadWithPSKAndContext.RUnlock()
	return calls
}
