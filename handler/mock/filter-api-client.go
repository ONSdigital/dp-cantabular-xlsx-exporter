// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/filter"
	"github.com/ONSdigital/dp-cantabular-xlsx-exporter/handler"
	"sync"
)

// Ensure, that FilterAPIClientMock does implement handler.FilterAPIClient.
// If this is not the case, regenerate this file with moq.
var _ handler.FilterAPIClient = &FilterAPIClientMock{}

// FilterAPIClientMock is a mock implementation of handler.FilterAPIClient.
//
//	func TestSomethingThatUsesFilterAPIClient(t *testing.T) {
//
//		// make and configure a mocked handler.FilterAPIClient
//		mockedFilterAPIClient := &FilterAPIClientMock{
//			GetOutputFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterOutput string) (filter.Model, error) {
//				panic("mock out the GetOutput method")
//			},
//			UpdateFilterOutputFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, filterOutputID string, m *filter.Model) error {
//				panic("mock out the UpdateFilterOutput method")
//			},
//		}
//
//		// use mockedFilterAPIClient in code that requires handler.FilterAPIClient
//		// and then make assertions.
//
//	}
type FilterAPIClientMock struct {
	// GetOutputFunc mocks the GetOutput method.
	GetOutputFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterOutput string) (filter.Model, error)

	// UpdateFilterOutputFunc mocks the UpdateFilterOutput method.
	UpdateFilterOutputFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, filterOutputID string, m *filter.Model) error

	// calls tracks calls to the methods.
	calls struct {
		// GetOutput holds details about calls to the GetOutput method.
		GetOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// DownloadServiceToken is the downloadServiceToken argument value.
			DownloadServiceToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// FilterOutput is the filterOutput argument value.
			FilterOutput string
		}
		// UpdateFilterOutput holds details about calls to the UpdateFilterOutput method.
		UpdateFilterOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// DownloadServiceToken is the downloadServiceToken argument value.
			DownloadServiceToken string
			// FilterOutputID is the filterOutputID argument value.
			FilterOutputID string
			// M is the m argument value.
			M *filter.Model
		}
	}
	lockGetOutput          sync.RWMutex
	lockUpdateFilterOutput sync.RWMutex
}

// GetOutput calls GetOutputFunc.
func (mock *FilterAPIClientMock) GetOutput(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterOutput string) (filter.Model, error) {
	if mock.GetOutputFunc == nil {
		panic("FilterAPIClientMock.GetOutputFunc: method is nil but FilterAPIClient.GetOutput was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterOutput         string
	}{
		Ctx:                  ctx,
		UserAuthToken:        userAuthToken,
		ServiceAuthToken:     serviceAuthToken,
		DownloadServiceToken: downloadServiceToken,
		CollectionID:         collectionID,
		FilterOutput:         filterOutput,
	}
	mock.lockGetOutput.Lock()
	mock.calls.GetOutput = append(mock.calls.GetOutput, callInfo)
	mock.lockGetOutput.Unlock()
	return mock.GetOutputFunc(ctx, userAuthToken, serviceAuthToken, downloadServiceToken, collectionID, filterOutput)
}

// GetOutputCalls gets all the calls that were made to GetOutput.
// Check the length with:
//
//	len(mockedFilterAPIClient.GetOutputCalls())
func (mock *FilterAPIClientMock) GetOutputCalls() []struct {
	Ctx                  context.Context
	UserAuthToken        string
	ServiceAuthToken     string
	DownloadServiceToken string
	CollectionID         string
	FilterOutput         string
} {
	var calls []struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterOutput         string
	}
	mock.lockGetOutput.RLock()
	calls = mock.calls.GetOutput
	mock.lockGetOutput.RUnlock()
	return calls
}

// UpdateFilterOutput calls UpdateFilterOutputFunc.
func (mock *FilterAPIClientMock) UpdateFilterOutput(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, filterOutputID string, m *filter.Model) error {
	if mock.UpdateFilterOutputFunc == nil {
		panic("FilterAPIClientMock.UpdateFilterOutputFunc: method is nil but FilterAPIClient.UpdateFilterOutput was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		FilterOutputID       string
		M                    *filter.Model
	}{
		Ctx:                  ctx,
		UserAuthToken:        userAuthToken,
		ServiceAuthToken:     serviceAuthToken,
		DownloadServiceToken: downloadServiceToken,
		FilterOutputID:       filterOutputID,
		M:                    m,
	}
	mock.lockUpdateFilterOutput.Lock()
	mock.calls.UpdateFilterOutput = append(mock.calls.UpdateFilterOutput, callInfo)
	mock.lockUpdateFilterOutput.Unlock()
	return mock.UpdateFilterOutputFunc(ctx, userAuthToken, serviceAuthToken, downloadServiceToken, filterOutputID, m)
}

// UpdateFilterOutputCalls gets all the calls that were made to UpdateFilterOutput.
// Check the length with:
//
//	len(mockedFilterAPIClient.UpdateFilterOutputCalls())
func (mock *FilterAPIClientMock) UpdateFilterOutputCalls() []struct {
	Ctx                  context.Context
	UserAuthToken        string
	ServiceAuthToken     string
	DownloadServiceToken string
	FilterOutputID       string
	M                    *filter.Model
} {
	var calls []struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		FilterOutputID       string
		M                    *filter.Model
	}
	mock.lockUpdateFilterOutput.RLock()
	calls = mock.calls.UpdateFilterOutput
	mock.lockUpdateFilterOutput.RUnlock()
	return calls
}
