// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/dataset"
	"github.com/ONSdigital/dp-cantabular-xlsx-exporter/handler"
	"sync"
)

// Ensure, that DatasetAPIClientMock does implement handler.DatasetAPIClient.
// If this is not the case, regenerate this file with moq.
var _ handler.DatasetAPIClient = &DatasetAPIClientMock{}

// DatasetAPIClientMock is a mock implementation of handler.DatasetAPIClient.
//
// 	func TestSomethingThatUsesDatasetAPIClient(t *testing.T) {
//
// 		// make and configure a mocked handler.DatasetAPIClient
// 		mockedDatasetAPIClient := &DatasetAPIClientMock{
// 			GetInstanceFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string, ifMatch string) (dataset.Instance, string, error) {
// 				panic("mock out the GetInstance method")
// 			},
// 			GetVersionMetadataFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, id string, edition string, version string) (dataset.Metadata, error) {
// 				panic("mock out the GetVersionMetadata method")
// 			},
// 			GetVersionMetadataSelectionFunc: func(contextMoqParam context.Context, getVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput) (*dataset.Metadata, error) {
// 				panic("mock out the GetVersionMetadataSelection method")
// 			},
// 			PutVersionFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string, edition string, version string, m dataset.Version) error {
// 				panic("mock out the PutVersion method")
// 			},
// 		}
//
// 		// use mockedDatasetAPIClient in code that requires handler.DatasetAPIClient
// 		// and then make assertions.
//
// 	}
type DatasetAPIClientMock struct {
	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string, ifMatch string) (dataset.Instance, string, error)

	// GetVersionMetadataFunc mocks the GetVersionMetadata method.
	GetVersionMetadataFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, id string, edition string, version string) (dataset.Metadata, error)

	// GetVersionMetadataSelectionFunc mocks the GetVersionMetadataSelection method.
	GetVersionMetadataSelectionFunc func(contextMoqParam context.Context, getVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput) (*dataset.Metadata, error)

	// PutVersionFunc mocks the PutVersion method.
	PutVersionFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string, edition string, version string, m dataset.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// IfMatch is the ifMatch argument value.
			IfMatch string
		}
		// GetVersionMetadata holds details about calls to the GetVersionMetadata method.
		GetVersionMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// ID is the id argument value.
			ID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
		}
		// GetVersionMetadataSelection holds details about calls to the GetVersionMetadataSelection method.
		GetVersionMetadataSelection []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetVersionMetadataSelectionInput is the getVersionMetadataSelectionInput argument value.
			GetVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput
		}
		// PutVersion holds details about calls to the PutVersion method.
		PutVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
			// M is the m argument value.
			M dataset.Version
		}
	}
	lockGetInstance                 sync.RWMutex
	lockGetVersionMetadata          sync.RWMutex
	lockGetVersionMetadataSelection sync.RWMutex
	lockPutVersion                  sync.RWMutex
}

// GetInstance calls GetInstanceFunc.
func (mock *DatasetAPIClientMock) GetInstance(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string, ifMatch string) (dataset.Instance, string, error) {
	if mock.GetInstanceFunc == nil {
		panic("DatasetAPIClientMock.GetInstanceFunc: method is nil but DatasetAPIClient.GetInstance was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
		IfMatch          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		InstanceID:       instanceID,
		IfMatch:          ifMatch,
	}
	mock.lockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	mock.lockGetInstance.Unlock()
	return mock.GetInstanceFunc(ctx, userAuthToken, serviceAuthToken, collectionID, instanceID, ifMatch)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedDatasetAPIClient.GetInstanceCalls())
func (mock *DatasetAPIClientMock) GetInstanceCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	InstanceID       string
	IfMatch          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
		IfMatch          string
	}
	mock.lockGetInstance.RLock()
	calls = mock.calls.GetInstance
	mock.lockGetInstance.RUnlock()
	return calls
}

// GetVersionMetadata calls GetVersionMetadataFunc.
func (mock *DatasetAPIClientMock) GetVersionMetadata(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, id string, edition string, version string) (dataset.Metadata, error) {
	if mock.GetVersionMetadataFunc == nil {
		panic("DatasetAPIClientMock.GetVersionMetadataFunc: method is nil but DatasetAPIClient.GetVersionMetadata was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		ID               string
		Edition          string
		Version          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		ID:               id,
		Edition:          edition,
		Version:          version,
	}
	mock.lockGetVersionMetadata.Lock()
	mock.calls.GetVersionMetadata = append(mock.calls.GetVersionMetadata, callInfo)
	mock.lockGetVersionMetadata.Unlock()
	return mock.GetVersionMetadataFunc(ctx, userAuthToken, serviceAuthToken, collectionID, id, edition, version)
}

// GetVersionMetadataCalls gets all the calls that were made to GetVersionMetadata.
// Check the length with:
//     len(mockedDatasetAPIClient.GetVersionMetadataCalls())
func (mock *DatasetAPIClientMock) GetVersionMetadataCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	ID               string
	Edition          string
	Version          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		ID               string
		Edition          string
		Version          string
	}
	mock.lockGetVersionMetadata.RLock()
	calls = mock.calls.GetVersionMetadata
	mock.lockGetVersionMetadata.RUnlock()
	return calls
}

// GetVersionMetadataSelection calls GetVersionMetadataSelectionFunc.
func (mock *DatasetAPIClientMock) GetVersionMetadataSelection(contextMoqParam context.Context, getVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput) (*dataset.Metadata, error) {
	if mock.GetVersionMetadataSelectionFunc == nil {
		panic("DatasetAPIClientMock.GetVersionMetadataSelectionFunc: method is nil but DatasetAPIClient.GetVersionMetadataSelection was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		GetVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput
	}{
		ContextMoqParam:                  contextMoqParam,
		GetVersionMetadataSelectionInput: getVersionMetadataSelectionInput,
	}
	mock.lockGetVersionMetadataSelection.Lock()
	mock.calls.GetVersionMetadataSelection = append(mock.calls.GetVersionMetadataSelection, callInfo)
	mock.lockGetVersionMetadataSelection.Unlock()
	return mock.GetVersionMetadataSelectionFunc(contextMoqParam, getVersionMetadataSelectionInput)
}

// GetVersionMetadataSelectionCalls gets all the calls that were made to GetVersionMetadataSelection.
// Check the length with:
//     len(mockedDatasetAPIClient.GetVersionMetadataSelectionCalls())
func (mock *DatasetAPIClientMock) GetVersionMetadataSelectionCalls() []struct {
	ContextMoqParam                  context.Context
	GetVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		GetVersionMetadataSelectionInput dataset.GetVersionMetadataSelectionInput
	}
	mock.lockGetVersionMetadataSelection.RLock()
	calls = mock.calls.GetVersionMetadataSelection
	mock.lockGetVersionMetadataSelection.RUnlock()
	return calls
}

// PutVersion calls PutVersionFunc.
func (mock *DatasetAPIClientMock) PutVersion(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string, edition string, version string, m dataset.Version) error {
	if mock.PutVersionFunc == nil {
		panic("DatasetAPIClientMock.PutVersionFunc: method is nil but DatasetAPIClient.PutVersion was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		DatasetID        string
		Edition          string
		Version          string
		M                dataset.Version
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		DatasetID:        datasetID,
		Edition:          edition,
		Version:          version,
		M:                m,
	}
	mock.lockPutVersion.Lock()
	mock.calls.PutVersion = append(mock.calls.PutVersion, callInfo)
	mock.lockPutVersion.Unlock()
	return mock.PutVersionFunc(ctx, userAuthToken, serviceAuthToken, collectionID, datasetID, edition, version, m)
}

// PutVersionCalls gets all the calls that were made to PutVersion.
// Check the length with:
//     len(mockedDatasetAPIClient.PutVersionCalls())
func (mock *DatasetAPIClientMock) PutVersionCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	DatasetID        string
	Edition          string
	Version          string
	M                dataset.Version
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		DatasetID        string
		Edition          string
		Version          string
		M                dataset.Version
	}
	mock.lockPutVersion.RLock()
	calls = mock.calls.PutVersion
	mock.lockPutVersion.RUnlock()
	return calls
}
