// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-cantabular-xlsx-exporter/service"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"io"
	"sync"
)

// Ensure, that S3ClientMock does implement service.S3Client.
// If this is not the case, regenerate this file with moq.
var _ service.S3Client = &S3ClientMock{}

// S3ClientMock is a mock implementation of service.S3Client.
//
// 	func TestSomethingThatUsesS3Client(t *testing.T) {
//
// 		// make and configure a mocked service.S3Client
// 		mockedS3Client := &S3ClientMock{
// 			BucketNameFunc: func() string {
// 				panic("mock out the BucketName method")
// 			},
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetFunc: func(key string) (io.ReadCloser, *int64, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetWithPSKFunc: func(key string, psk []byte) (io.ReadCloser, *int64, error) {
// 				panic("mock out the GetWithPSK method")
// 			},
// 			HeadFunc: func(key string) (*s3.HeadObjectOutput, error) {
// 				panic("mock out the Head method")
// 			},
// 			SessionFunc: func() *session.Session {
// 				panic("mock out the Session method")
// 			},
// 			UploadWithContextFunc: func(ctx context.Context, input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 				panic("mock out the UploadWithContext method")
// 			},
// 			UploadWithPSKAndContextFunc: func(ctx context.Context, input *s3manager.UploadInput, psk []byte, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 				panic("mock out the UploadWithPSKAndContext method")
// 			},
// 		}
//
// 		// use mockedS3Client in code that requires service.S3Client
// 		// and then make assertions.
//
// 	}
type S3ClientMock struct {
	// BucketNameFunc mocks the BucketName method.
	BucketNameFunc func() string

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// GetFunc mocks the Get method.
	GetFunc func(key string) (io.ReadCloser, *int64, error)

	// GetWithPSKFunc mocks the GetWithPSK method.
	GetWithPSKFunc func(key string, psk []byte) (io.ReadCloser, *int64, error)

	// HeadFunc mocks the Head method.
	HeadFunc func(key string) (*s3.HeadObjectOutput, error)

	// SessionFunc mocks the Session method.
	SessionFunc func() *session.Session

	// UploadWithContextFunc mocks the UploadWithContext method.
	UploadWithContextFunc func(ctx context.Context, input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// UploadWithPSKAndContextFunc mocks the UploadWithPSKAndContext method.
	UploadWithPSKAndContextFunc func(ctx context.Context, input *s3manager.UploadInput, psk []byte, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// BucketName holds details about calls to the BucketName method.
		BucketName []struct {
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// GetWithPSK holds details about calls to the GetWithPSK method.
		GetWithPSK []struct {
			// Key is the key argument value.
			Key string
			// Psk is the psk argument value.
			Psk []byte
		}
		// Head holds details about calls to the Head method.
		Head []struct {
			// Key is the key argument value.
			Key string
		}
		// Session holds details about calls to the Session method.
		Session []struct {
		}
		// UploadWithContext holds details about calls to the UploadWithContext method.
		UploadWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Options is the options argument value.
			Options []func(*s3manager.Uploader)
		}
		// UploadWithPSKAndContext holds details about calls to the UploadWithPSKAndContext method.
		UploadWithPSKAndContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Psk is the psk argument value.
			Psk []byte
			// Options is the options argument value.
			Options []func(*s3manager.Uploader)
		}
	}
	lockBucketName              sync.RWMutex
	lockChecker                 sync.RWMutex
	lockGet                     sync.RWMutex
	lockGetWithPSK              sync.RWMutex
	lockHead                    sync.RWMutex
	lockSession                 sync.RWMutex
	lockUploadWithContext       sync.RWMutex
	lockUploadWithPSKAndContext sync.RWMutex
}

// BucketName calls BucketNameFunc.
func (mock *S3ClientMock) BucketName() string {
	if mock.BucketNameFunc == nil {
		panic("S3ClientMock.BucketNameFunc: method is nil but S3Client.BucketName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBucketName.Lock()
	mock.calls.BucketName = append(mock.calls.BucketName, callInfo)
	mock.lockBucketName.Unlock()
	return mock.BucketNameFunc()
}

// BucketNameCalls gets all the calls that were made to BucketName.
// Check the length with:
//     len(mockedS3Client.BucketNameCalls())
func (mock *S3ClientMock) BucketNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBucketName.RLock()
	calls = mock.calls.BucketName
	mock.lockBucketName.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *S3ClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("S3ClientMock.CheckerFunc: method is nil but S3Client.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedS3Client.CheckerCalls())
func (mock *S3ClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *S3ClientMock) Get(key string) (io.ReadCloser, *int64, error) {
	if mock.GetFunc == nil {
		panic("S3ClientMock.GetFunc: method is nil but S3Client.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedS3Client.GetCalls())
func (mock *S3ClientMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetWithPSK calls GetWithPSKFunc.
func (mock *S3ClientMock) GetWithPSK(key string, psk []byte) (io.ReadCloser, *int64, error) {
	if mock.GetWithPSKFunc == nil {
		panic("S3ClientMock.GetWithPSKFunc: method is nil but S3Client.GetWithPSK was just called")
	}
	callInfo := struct {
		Key string
		Psk []byte
	}{
		Key: key,
		Psk: psk,
	}
	mock.lockGetWithPSK.Lock()
	mock.calls.GetWithPSK = append(mock.calls.GetWithPSK, callInfo)
	mock.lockGetWithPSK.Unlock()
	return mock.GetWithPSKFunc(key, psk)
}

// GetWithPSKCalls gets all the calls that were made to GetWithPSK.
// Check the length with:
//     len(mockedS3Client.GetWithPSKCalls())
func (mock *S3ClientMock) GetWithPSKCalls() []struct {
	Key string
	Psk []byte
} {
	var calls []struct {
		Key string
		Psk []byte
	}
	mock.lockGetWithPSK.RLock()
	calls = mock.calls.GetWithPSK
	mock.lockGetWithPSK.RUnlock()
	return calls
}

// Head calls HeadFunc.
func (mock *S3ClientMock) Head(key string) (*s3.HeadObjectOutput, error) {
	if mock.HeadFunc == nil {
		panic("S3ClientMock.HeadFunc: method is nil but S3Client.Head was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockHead.Lock()
	mock.calls.Head = append(mock.calls.Head, callInfo)
	mock.lockHead.Unlock()
	return mock.HeadFunc(key)
}

// HeadCalls gets all the calls that were made to Head.
// Check the length with:
//     len(mockedS3Client.HeadCalls())
func (mock *S3ClientMock) HeadCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockHead.RLock()
	calls = mock.calls.Head
	mock.lockHead.RUnlock()
	return calls
}

// Session calls SessionFunc.
func (mock *S3ClientMock) Session() *session.Session {
	if mock.SessionFunc == nil {
		panic("S3ClientMock.SessionFunc: method is nil but S3Client.Session was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSession.Lock()
	mock.calls.Session = append(mock.calls.Session, callInfo)
	mock.lockSession.Unlock()
	return mock.SessionFunc()
}

// SessionCalls gets all the calls that were made to Session.
// Check the length with:
//     len(mockedS3Client.SessionCalls())
func (mock *S3ClientMock) SessionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSession.RLock()
	calls = mock.calls.Session
	mock.lockSession.RUnlock()
	return calls
}

// UploadWithContext calls UploadWithContextFunc.
func (mock *S3ClientMock) UploadWithContext(ctx context.Context, input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadWithContextFunc == nil {
		panic("S3ClientMock.UploadWithContextFunc: method is nil but S3Client.UploadWithContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Options []func(*s3manager.Uploader)
	}{
		Ctx:     ctx,
		Input:   input,
		Options: options,
	}
	mock.lockUploadWithContext.Lock()
	mock.calls.UploadWithContext = append(mock.calls.UploadWithContext, callInfo)
	mock.lockUploadWithContext.Unlock()
	return mock.UploadWithContextFunc(ctx, input, options...)
}

// UploadWithContextCalls gets all the calls that were made to UploadWithContext.
// Check the length with:
//     len(mockedS3Client.UploadWithContextCalls())
func (mock *S3ClientMock) UploadWithContextCalls() []struct {
	Ctx     context.Context
	Input   *s3manager.UploadInput
	Options []func(*s3manager.Uploader)
} {
	var calls []struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Options []func(*s3manager.Uploader)
	}
	mock.lockUploadWithContext.RLock()
	calls = mock.calls.UploadWithContext
	mock.lockUploadWithContext.RUnlock()
	return calls
}

// UploadWithPSKAndContext calls UploadWithPSKAndContextFunc.
func (mock *S3ClientMock) UploadWithPSKAndContext(ctx context.Context, input *s3manager.UploadInput, psk []byte, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadWithPSKAndContextFunc == nil {
		panic("S3ClientMock.UploadWithPSKAndContextFunc: method is nil but S3Client.UploadWithPSKAndContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Psk     []byte
		Options []func(*s3manager.Uploader)
	}{
		Ctx:     ctx,
		Input:   input,
		Psk:     psk,
		Options: options,
	}
	mock.lockUploadWithPSKAndContext.Lock()
	mock.calls.UploadWithPSKAndContext = append(mock.calls.UploadWithPSKAndContext, callInfo)
	mock.lockUploadWithPSKAndContext.Unlock()
	return mock.UploadWithPSKAndContextFunc(ctx, input, psk, options...)
}

// UploadWithPSKAndContextCalls gets all the calls that were made to UploadWithPSKAndContext.
// Check the length with:
//     len(mockedS3Client.UploadWithPSKAndContextCalls())
func (mock *S3ClientMock) UploadWithPSKAndContextCalls() []struct {
	Ctx     context.Context
	Input   *s3manager.UploadInput
	Psk     []byte
	Options []func(*s3manager.Uploader)
} {
	var calls []struct {
		Ctx     context.Context
		Input   *s3manager.UploadInput
		Psk     []byte
		Options []func(*s3manager.Uploader)
	}
	mock.lockUploadWithPSKAndContext.RLock()
	calls = mock.calls.UploadWithPSKAndContext
	mock.lockUploadWithPSKAndContext.RUnlock()
	return calls
}
