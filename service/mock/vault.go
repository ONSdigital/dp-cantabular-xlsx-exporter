// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-cantabular-xlsx-exporter/service"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that VaultClientMock does implement service.VaultClient.
// If this is not the case, regenerate this file with moq.
var _ service.VaultClient = &VaultClientMock{}

// VaultClientMock is a mock implementation of service.VaultClient.
//
// 	func TestSomethingThatUsesVaultClient(t *testing.T) {
//
// 		// make and configure a mocked service.VaultClient
// 		mockedVaultClient := &VaultClientMock{
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			WriteKeyFunc: func(path string, key string, value string) error {
// 				panic("mock out the WriteKey method")
// 			},
// 		}
//
// 		// use mockedVaultClient in code that requires service.VaultClient
// 		// and then make assertions.
//
// 	}
type VaultClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// WriteKeyFunc mocks the WriteKey method.
	WriteKeyFunc func(path string, key string, value string) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// WriteKey holds details about calls to the WriteKey method.
		WriteKey []struct {
			// Path is the path argument value.
			Path string
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
		}
	}
	lockChecker  sync.RWMutex
	lockWriteKey sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *VaultClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("VaultClientMock.CheckerFunc: method is nil but VaultClient.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedVaultClient.CheckerCalls())
func (mock *VaultClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// WriteKey calls WriteKeyFunc.
func (mock *VaultClientMock) WriteKey(path string, key string, value string) error {
	if mock.WriteKeyFunc == nil {
		panic("VaultClientMock.WriteKeyFunc: method is nil but VaultClient.WriteKey was just called")
	}
	callInfo := struct {
		Path  string
		Key   string
		Value string
	}{
		Path:  path,
		Key:   key,
		Value: value,
	}
	mock.lockWriteKey.Lock()
	mock.calls.WriteKey = append(mock.calls.WriteKey, callInfo)
	mock.lockWriteKey.Unlock()
	return mock.WriteKeyFunc(path, key, value)
}

// WriteKeyCalls gets all the calls that were made to WriteKey.
// Check the length with:
//     len(mockedVaultClient.WriteKeyCalls())
func (mock *VaultClientMock) WriteKeyCalls() []struct {
	Path  string
	Key   string
	Value string
} {
	var calls []struct {
		Path  string
		Key   string
		Value string
	}
	mock.lockWriteKey.RLock()
	calls = mock.calls.WriteKey
	mock.lockWriteKey.RUnlock()
	return calls
}
